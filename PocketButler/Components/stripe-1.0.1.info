{"Name":"Stripe","Id":1033,"Alias":"stripe","Description":"\nThis library lets you easily collect and process your customers\u0027 payment information in your Xamarin.iOS and Xamarin.Android apps. It also seamlessly integrates with Apple Pay, Apple\u0027s integrated payment framework.\n\n**iOS UI**\n\n\n\n**Android UI**\n\n\n\n## Features\n\n - Xamarin.iOS and Xamarin.Android support\n - Apple Pay Support \n - Customize your own Credit Card UI\n - Capture Stripe Tokens\n\n## Learn More\nLearn more about Stripe by visiting http://stripe.com","Version":"1.0.1","Summary":"Mobile Payments built for Developers","QuickStart":"## Obtaining your Publishable API Keys\n\nYour Publishable API Keys can be found by logging into your [Stripe Dashboard](https://dashboard.stripe.com/).  You will need to create an account first if you do not already have one.\n\nOnce you are logged into the dashboard, navigate to the ***API Keys*** tab, inside of the ***Account Settings*** menu.\n\n\n## Configuring your app\nYou\u0027ll need to configure Stripe in your app with your publishable API key. We recommend doing this in your `AppDelegate`\u0027s `DidFinishLaunching` method on iOS, or in your `MainActivity` or `Application.OnCreate` on Android so that it\u0027ll be set for the entire lifecycle of your app.\n\n**iOS**\n```csharp\n// AppDelegate.cs\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\tStripe.StripeClient.DefaultPublishableKey = \"pk_test_1234-YOUR-KEY-HERE\";\n\t\n\t// ... your other code\n}\n```\n\n**Android**\n```csharp\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\tStripe.StripeClient.DefaultPublishableKey = \"pk_test_1234-YOUR-KEY-HERE\";\n\t\n\t// ... your other code\n}\n```\n\n\n### Test Mode:\nWhen you\u0027re using your test publishable key, our libraries give you the ability to test your payment flow without having to charge real credit cards.\n\n**Note about ?Pay on iOS**:\nOn iOS8+, our Apple Pay integration presents an alternate credit card selection UI that produces test cards.  If you want to use this alternative Test UI, you will need to implement `IStripeTestPaymentAuthorizationViewControllerDelegate` and call `CreateTestToken` to initiate the \u0027test\u0027 flow.  This has been designed to work the same way as the actual ?Pay flow.  Check out the `iOS Sample` to see how this test flow is implemented.\n\nIf you\u0027re building your own form or using `StripeView`, using the card number `4242424242424242` (along with any CVC and future expiration date) in the `CreateToken` call will return a `Token` which when used on your server will result in successful transactions.\n\nYou\u0027ll need to swap it out with your live publishable key when you are ready to publish to production. You can see all your API keys in your dashboard.\n\n\n\n\n## Collecting Credit Card Information\nAt some point in the flow of your app, you\u0027ll want to obtain payment details from the user. There are two ways to do this:\n\n 1. Use Apple\u0027s Apple Pay framework to access your users\u0027 stored payment information\n 2. Use the `StripeView` UI Control to capture credit card number, expiry date, and CVC (available on both iOS and Android)\n 3. Build your own credit card form from scratch\n \nApple Pay only supports certain US credit cards on the latest iOS devices. We recommend using Apple Pay in combination with option 2 or 3 as a fallback on devices where Apple Pay is not available.\n\n\n\n\n### 1. Using Apple Pay on iOS 8+\nWith Apple\u0027s Apple Pay, you\u0027ll be able to access payment information stored on your customers\u0027 iOS devices.\n\nTo use ?Pay, you\u0027ll need to generate a `PKPaymentRequest` to submit to Apple. We\u0027ve provided a convenience method to generate one, which you can customize as you see fit. For a more in-depth reference, see the `PKPaymentRequest` documentation.\n\nAfter you create the request, query the device to see if ?Pay is available (i.e. if your app is running on the latest hardware and the user has added a valid credit card):\n\n```csharp\nvar paymentRequest = StripeClient.PaymentRequest (\n\t\t\t\t\t\t\"YOUR.MERCHANT.ID\",\n\t\t\t\t\t\tnew NSDecimalNumber (\"10.00\"),\n\t\t\t\t\t\t\"USD\",\n\t\t\t\t\t\t\"Premium llama food\");\n\nif (StripeClient.CanSubmitPaymentRequest (paymentRequest)) {\n\t// ...\t\n} else {\n\t// Show the user your own credit card form to capture input\n}\t\t\t\t\n```\n\n`YOUR.MERCHANT.ID` is an identifier that you obtain directly from Appleâ€”log in to your account to do so. Next, you should create and display the payment request view controller.\n\n```csharp\nif (StripeClient.CanSubmitPaymentRequest (paymentRequest) {\n\t\n\tvar paymentController = StripeClient.PaymentController (\n  \t\t\t\t\t\t\t\tpaymentRequest,\n  \t\t\t\t\t\t\t\tthis);\n  \t\t\t\t\t\t\t\t\n\tPresentViewController (paymentController, true, null);\t\n} else {\n\t// Show the user your own credit card form\n}\n```\n\nYou may have noticed that `PaymentController (..)` needs to be given a `IPKPaymentAuthorizationViewControllerDelegate`.  You\u0027ll handle the `PKPayment` that the controller returns by implementing this interface. In this case, we\u0027ll implement it in our ViewController:\n\n```csharp\npublic void DidAuthorizePayment (\n\tPKPaymentAuthorizationViewController controller, \n\tPKPayment payment, \t\t\n\tPKPaymentAuthorizationHandler completion)\n{\n\t// We\u0027ll implement this method below in the Getting Started\n\t// section \u0027Creating a single-use token\u0027.\n\t// Note that we\u0027ve also been given a callback that takes a\n\t// `PKPaymentAuthorizationStatus`. We\u0027ll call this function with either\n\t// `PKPaymentAuthorizationStatus.Success` or `PKPaymentAuthorizationStatus.Failure`\n\t// after all of our asynchronous code is finished executing. This is how the\n\t// `PKPaymentAuthorizationViewController` knows when and how to update its UI.\n    \n\tthis.HandlePaymentAuthorization (payment, completion);\n}\n\npublic void PaymentAuthorizationViewControllerDidFinish (PKPaymentAuthorizationViewController controller)\n{\n\tthis.DismissViewController (true, null);\n}\n```          \n\nAfter the controller has returned with a `PKPayment`, we can move ahead to the section \u0027Creating Tokens\u0027.\n\n\n\n\n\n### 2. Using StripeView\n\nTo make the process of collecting Credit Card information easier, you can use a pre-made UI control called `StripeView`.\n\nThis view captures the following credit card information:\n - Credit Card Number\n - Expiry Date\n - CVC\n \nUsing the control is as simple as using any other View on a given platform.  When you\u0027re ready to capture Credit Card data, simply access the `StripeView.Card` property which will return an instance of `Card`.\n\n**iOS**\n```csharp\n// Create the View and add it to your parent\nstripeView = new StripeView ();\nstripeView.Frame = new CGRect (10, 100, stripeView.Frame.Width, stripeView.Frame.Height);\nView.AddSubview (stripeView);\n```\n\n**Android**\n```xml\n\u003cStripe.StripeView\n        android:id=\"@+id/stripeView\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"10dp\" /\u003e\n```\n\nWhen paying, you can access the `Card` property of your view to be used in the `CreateToken` call:\n\n```csharp\n// When paying...\nvar card = stripeView.Card;\nStripeClient.CreateToken (card);\n```\n\n\n### 3. Building your own form\n\nIf you build your own payment form, you\u0027ll need to collect at least your customers\u0027 card numbers and expiration dates. You should likely also collect the CVC to prevent fraud. You can also optionally collect the user\u0027s name and billing address for additional fraud protection.\n\n\n\n\n\n\n\n## Creating Tokens\n\nOur libraries shoulder the burden of PCI compliance by helping you avoid the need to send card data directly to your server. Instead, our libraries send credit card data directly to our servers, where we can convert them to tokens. You can charge these tokens later in your server-side code.\n\n\n\n### Using a PKPayment (from Apple Pay)\n\nAfter you\u0027ve received a PKPayment, you can turn it into a single-use Stripe token with a simple method call:\n\n```csharp\nasync Task HandlePaymentAuthorization (PKPayment payment, PKPaymentAuthorizationHandler completion)\n{\n\ttry {\n\t\tvar token = await StripeClient.CreateToken (payment);\n\t\t\n\t\t// Submit the new token info to your Credit card server\n\t\t// CreateBackendCharge should call the ?Pay completion action\n\t\t// when it\u0027s done!\n\t\tawait CreateBackendCharge (token, completion);\n\t\t\n\t} catch (Exception ex) {\n\t\t// Call the ?Pay completion handler\n\t\tcompletion (PKPaymentAuthorizationStatus.Failure);\n\t\t\n\t\tConsole.WriteLine (ex);\n\t}\n}\n```\t\t\n\n### Using a Card\n\nIf you\u0027re using your own form, you can assemble the data into an `Card`. Once you\u0027ve collected the card number, expiration, and CVC, package them up in an `Card` object and invoke the `StripeClient.CreateToken` method, instructing the library to send off the credit card data to Stripe and return a token.\n\n```csharp\npublic async Task Save () \n{\n\tvar card = new Card {\n\t\tNumber = \"4242424242424242\",\n\t\tExpiryMonth = 12,\n\t\tExpiryYear = 16,\n\t\tCVC = 123\n\t};\n\t\n\ttry {\n\t\tvar token = await StripeClient.CreateToken (card);, (token, error);\n\t\t\n\t\t// Slightly different for non-Apple Pay use, see \n\t\t// \u0027Sending the token to your server\u0027 for more info\n\t\tawait CreateBackendCharge (token);\n\t\t\n\t} catch (Exception ex) {\n\n\t\t// Handle a failure\n\t\tConsole.WriteLine (ex);\n\t}\t\t\t\n}\n```\n\nIn the example above, we\u0027re calling `CreateToken` when a save button is tapped. The important thing to ensure is the `CreateToken` isn\u0027t called before the user has finished inputting their details.\n\nHandling error messages and showing activity indicators while we\u0027re creating the token is up to you.\n\n\n\n\n\n\n## Sending the token to your server\n\nThe completion handler you gave to `CreateToken` will be called whenever Stripe returns with a token (or error). You\u0027ll need to send the token off to your server so you can, for example, charge the card.\n\nHere\u0027s how it looks for a token created with Apple Pay:\n\n```csharp\nasync Task CreateBackendCharge (Token token, PKPaymentAuthorizationHandler completion) \n{\n\tvar http = new HttpClient ();\n\t\n\tvar content = new StringContent (\"StripeTokenId=\" + token.TokenId);\n\n\tvar response = await http.PostAsync(\"https://example.com/token\", content);\n\n\tif (response.StatusCode != HttpStatusCode.OK)\n\t\tcompletion (PKPaymentAuthorizationStatus.Failure);\n\telse\n\t\tcompletion (PKPaymentAuthorizationStatus.Success);\n}\t\t\n```\n\nIf you\u0027re not using Apple Pay, the above code would be mostly the same, though you\u0027ll want a slightly different signatureâ€”the completion callback shown above is ?Pay specific. You would instead want to implement custom error and success handling.\n\nOn the server, you just need to implement an endpoint that will accept a parameter called `StripeTokenId`.  Make sure any communication with your server is SSL secured to prevent eavesdropping.\n\nOnce you have a Stripe `Token` representing a card on our server we can go ahead and charge it, save it for charging later, or sign the user up for a subscription. \n\nTake a look at the full example application to see everything put together.\n\n","Hash":"c143a5de02fdd4d9d75d76340ea66597","TargetPlatforms":["ios","android"],"TrialHash":null}